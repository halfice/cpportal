//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2020-01-29 02:52:35 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using System.IO;
using System.Text;
using System.Security.Cryptography;
using CitizenPortal.Extensions;
namespace CitizenPortal.DAL
{

    internal partial class dbContext : DbContext
    {
      
        public dbContext() :
            base()
        {
            OnCreated();
        }

        public dbContext(DbContextOptions<dbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {

              string MasterKey = "a66a" + "1f25" + "66af" + "40dd";
        string FinalString = StringEncryptionExtensions.Decrypt(GetConnectionString("dbContextConnectionString"));
            optionsBuilder.UseSqlServer(FinalString);
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }
      

        private string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder()
                 .SetBasePath(Directory.GetCurrentDirectory())
                 .AddJsonFile("appsettings.json", true, true);
            //var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<CPEmailTemplate> CPEmailTemplates
        {
            get;
            set;
        }

        public virtual DbSet<CPEntity> CPEntities
        {
            get;
            set;
        }

        public virtual DbSet<CPExceptionLog> CPExceptionLogs
        {
            get;
            set;
        }

        public virtual DbSet<CPGroupRole> CPGroupRoles
        {
            get;
            set;
        }

        public virtual DbSet<CPGroup> CPGroups
        {
            get;
            set;
        }

        public virtual DbSet<CPGroupUser> CPGroupUsers
        {
            get;
            set;
        }

        public virtual DbSet<CPLanguageDictionary> CPLanguageDictionaries
        {
            get;
            set;
        }

        public virtual DbSet<CPLookupCategory> CPLookupCategories
        {
            get;
            set;
        }

        public virtual DbSet<CPLookup> CPLookups
        {
            get;
            set;
        }

        public virtual DbSet<CPOnlineSession> CPOnlineSessions
        {
            get;
            set;
        }

        public virtual DbSet<CPOutEmail> CPOutEmails
        {
            get;
            set;
        }

        public virtual DbSet<CPRole> CPRoles
        {
            get;
            set;
        }

        public virtual DbSet<CPTenantDomain> CPTenantDomains
        {
            get;
            set;
        }

        public virtual DbSet<CPTenant> CPTenants
        {
            get;
            set;
        }

        public virtual DbSet<CPTmpAssignee> CPTmpAssignees
        {
            get;
            set;
        }

        public virtual DbSet<CPTmpInstance> CPTmpInstances
        {
            get;
            set;
        }

        public virtual DbSet<CPTmpInstanceStatu> CPTmpInstanceStatus
        {
            get;
            set;
        }

        public virtual DbSet<CPTmpMetadata> CPTmpMetadatas
        {
            get;
            set;
        }

        public virtual DbSet<CPTmpWorkflowcategory> CPTmpWorkflowcategories
        {
            get;
            set;
        }

        public virtual DbSet<CPUnit> CPUnits
        {
            get;
            set;
        }

        public virtual DbSet<CPUnitsOld> CPUnitsOlds
        {
            get;
            set;
        }

        public virtual DbSet<CPUnitType> CPUnitTypes
        {
            get;
            set;
        }

        public virtual DbSet<CPUserDelegation> CPUserDelegations
        {
            get;
            set;
        }

        public virtual DbSet<CPUser> CPUsers
        {
            get;
            set;
        }

        public virtual DbSet<CPUsersBeforeSync> CPUsersBeforeSyncs
        {
            get;
            set;
        }

        public virtual DbSet<CPUserTempAssignment> CPUserTempAssignments
        {
            get;
            set;
        }

        public virtual DbSet<CPVendor> CPVendors
        {
            get;
            set;
        }

        public virtual DbSet<CPWFInstancesFollowup> CPWFInstancesFollowups
        {
            get;
            set;
        }

        public virtual DbSet<CPWorkflowAssignee> CPWorkflowAssignees
        {
            get;
            set;
        }

        public virtual DbSet<CPWorkflowCategory> CPWorkflowCategories
        {
            get;
            set;
        }

        public virtual DbSet<CPWorkflowInstance> CPWorkflowInstances
        {
            get;
            set;
        }

        public virtual DbSet<CPWorkflowInstanceStatus> CPWorkflowInstanceStatus
        {
            get;
            set;
        }

        public virtual DbSet<dbCoreWorkflowMetadata> dbCoreWorkflowMetadatas
        {
            get;
            set;
        }

        #region Methods

        public void CPAddEmployeeObject(string ObjectiveAr)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.AddEmployeeObject :ObjectiveAr";

                    DbParameter ObjectiveArParameter = cmd.CreateParameter();
                    ObjectiveArParameter.ParameterName = "ObjectiveAr";
                    ObjectiveArParameter.Direction = ParameterDirection.Input;
                    if (ObjectiveAr != null)
                    {
                        ObjectiveArParameter.Value = ObjectiveAr;
                    }
                    else
                    {
                        ObjectiveArParameter.DbType = DbType.String;
                        ObjectiveArParameter.Size = -1;
                        ObjectiveArParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ObjectiveArParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void CPAddEmployeeObjective(System.Nullable<int> ObjectiveID, System.Nullable<int> userid)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.AddEmployeeObjective :ObjectiveID, :userid";

                    DbParameter ObjectiveIDParameter = cmd.CreateParameter();
                    ObjectiveIDParameter.ParameterName = "ObjectiveID";
                    ObjectiveIDParameter.Direction = ParameterDirection.Input;
                    if (ObjectiveID.HasValue)
                    {
                        ObjectiveIDParameter.Value = ObjectiveID.Value;
                    }
                    else
                    {
                        ObjectiveIDParameter.DbType = DbType.Int32;
                        ObjectiveIDParameter.Size = -1;
                        ObjectiveIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ObjectiveIDParameter);

                    DbParameter useridParameter = cmd.CreateParameter();
                    useridParameter.ParameterName = "userid";
                    useridParameter.Direction = ParameterDirection.Input;
                    if (userid.HasValue)
                    {
                        useridParameter.Value = userid.Value;
                    }
                    else
                    {
                        useridParameter.DbType = DbType.Int32;
                        useridParameter.Size = -1;
                        useridParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(useridParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void dbDboAddWorkFlowAssignee(string InstanceId, string UserId, string CycleId, System.Nullable<int> AssigneeStatus, string StepId, string StepNameCaption, string StepCaption, string Comments, System.Nullable<System.DateTime> CreationDate)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.AddWorkFlowAssignee :InstanceId, :UserId, :CycleId, :AssigneeStatus, :StepId, :StepNameCaption, :StepCaption, :Comments, :CreationDate";

                    DbParameter InstanceIdParameter = cmd.CreateParameter();
                    InstanceIdParameter.ParameterName = "InstanceId";
                    InstanceIdParameter.Direction = ParameterDirection.Input;
                    if (InstanceId != null)
                    {
                        InstanceIdParameter.Value = InstanceId;
                    }
                    else
                    {
                        InstanceIdParameter.DbType = DbType.String;
                        InstanceIdParameter.Size = -1;
                        InstanceIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InstanceIdParameter);

                    DbParameter UserIdParameter = cmd.CreateParameter();
                    UserIdParameter.ParameterName = "UserId";
                    UserIdParameter.Direction = ParameterDirection.Input;
                    if (UserId != null)
                    {
                        UserIdParameter.Value = UserId;
                    }
                    else
                    {
                        UserIdParameter.DbType = DbType.String;
                        UserIdParameter.Size = -1;
                        UserIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(UserIdParameter);

                    DbParameter CycleIdParameter = cmd.CreateParameter();
                    CycleIdParameter.ParameterName = "CycleId";
                    CycleIdParameter.Direction = ParameterDirection.Input;
                    if (CycleId != null)
                    {
                        CycleIdParameter.Value = CycleId;
                    }
                    else
                    {
                        CycleIdParameter.DbType = DbType.String;
                        CycleIdParameter.Size = -1;
                        CycleIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CycleIdParameter);

                    DbParameter AssigneeStatusParameter = cmd.CreateParameter();
                    AssigneeStatusParameter.ParameterName = "AssigneeStatus";
                    AssigneeStatusParameter.Direction = ParameterDirection.Input;
                    if (AssigneeStatus.HasValue)
                    {
                        AssigneeStatusParameter.Value = AssigneeStatus.Value;
                    }
                    else
                    {
                        AssigneeStatusParameter.DbType = DbType.Int32;
                        AssigneeStatusParameter.Size = -1;
                        AssigneeStatusParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AssigneeStatusParameter);

                    DbParameter StepIdParameter = cmd.CreateParameter();
                    StepIdParameter.ParameterName = "StepId";
                    StepIdParameter.Direction = ParameterDirection.Input;
                    if (StepId != null)
                    {
                        StepIdParameter.Value = StepId;
                    }
                    else
                    {
                        StepIdParameter.DbType = DbType.String;
                        StepIdParameter.Size = -1;
                        StepIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StepIdParameter);

                    DbParameter StepNameCaptionParameter = cmd.CreateParameter();
                    StepNameCaptionParameter.ParameterName = "StepNameCaption";
                    StepNameCaptionParameter.Direction = ParameterDirection.Input;
                    if (StepNameCaption != null)
                    {
                        StepNameCaptionParameter.Value = StepNameCaption;
                    }
                    else
                    {
                        StepNameCaptionParameter.DbType = DbType.String;
                        StepNameCaptionParameter.Size = -1;
                        StepNameCaptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StepNameCaptionParameter);

                    DbParameter StepCaptionParameter = cmd.CreateParameter();
                    StepCaptionParameter.ParameterName = "StepCaption";
                    StepCaptionParameter.Direction = ParameterDirection.Input;
                    if (StepCaption != null)
                    {
                        StepCaptionParameter.Value = StepCaption;
                    }
                    else
                    {
                        StepCaptionParameter.DbType = DbType.String;
                        StepCaptionParameter.Size = -1;
                        StepCaptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StepCaptionParameter);

                    DbParameter CommentsParameter = cmd.CreateParameter();
                    CommentsParameter.ParameterName = "Comments";
                    CommentsParameter.Direction = ParameterDirection.Input;
                    if (Comments != null)
                    {
                        CommentsParameter.Value = Comments;
                    }
                    else
                    {
                        CommentsParameter.DbType = DbType.String;
                        CommentsParameter.Size = -1;
                        CommentsParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CommentsParameter);

                    DbParameter CreationDateParameter = cmd.CreateParameter();
                    CreationDateParameter.ParameterName = "CreationDate";
                    CreationDateParameter.Direction = ParameterDirection.Input;
                    if (CreationDate.HasValue)
                    {
                        CreationDateParameter.Value = CreationDate.Value;
                    }
                    else
                    {
                        CreationDateParameter.DbType = DbType.DateTime;
                        CreationDateParameter.Size = -1;
                        CreationDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CreationDateParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void dbDboCreateProcPlan(string ProcPlanTitle, string ProcPlanSid, System.Nullable<System.DateTime> ProcPlanStartDate, System.Nullable<System.DateTime> ProcPlanEndDate)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.CreateProcPlan :ProcPlanTitle, :ProcPlanSid, :ProcPlanStartDate, :ProcPlanEndDate";

                    DbParameter ProcPlanTitleParameter = cmd.CreateParameter();
                    ProcPlanTitleParameter.ParameterName = "ProcPlanTitle";
                    ProcPlanTitleParameter.Direction = ParameterDirection.Input;
                    if (ProcPlanTitle != null)
                    {
                        ProcPlanTitleParameter.Value = ProcPlanTitle;
                    }
                    else
                    {
                        ProcPlanTitleParameter.DbType = DbType.String;
                        ProcPlanTitleParameter.Size = -1;
                        ProcPlanTitleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcPlanTitleParameter);

                    DbParameter ProcPlanSidParameter = cmd.CreateParameter();
                    ProcPlanSidParameter.ParameterName = "ProcPlanSid";
                    ProcPlanSidParameter.Direction = ParameterDirection.Input;
                    if (ProcPlanSid != null)
                    {
                        ProcPlanSidParameter.Value = ProcPlanSid;
                    }
                    else
                    {
                        ProcPlanSidParameter.DbType = DbType.String;
                        ProcPlanSidParameter.Size = -1;
                        ProcPlanSidParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcPlanSidParameter);

                    DbParameter ProcPlanStartDateParameter = cmd.CreateParameter();
                    ProcPlanStartDateParameter.ParameterName = "ProcPlanStartDate";
                    ProcPlanStartDateParameter.Direction = ParameterDirection.Input;
                    if (ProcPlanStartDate.HasValue)
                    {
                        ProcPlanStartDateParameter.Value = ProcPlanStartDate.Value;
                    }
                    else
                    {
                        ProcPlanStartDateParameter.DbType = DbType.DateTime;
                        ProcPlanStartDateParameter.Size = -1;
                        ProcPlanStartDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcPlanStartDateParameter);

                    DbParameter ProcPlanEndDateParameter = cmd.CreateParameter();
                    ProcPlanEndDateParameter.ParameterName = "ProcPlanEndDate";
                    ProcPlanEndDateParameter.Direction = ParameterDirection.Input;
                    if (ProcPlanEndDate.HasValue)
                    {
                        ProcPlanEndDateParameter.Value = ProcPlanEndDate.Value;
                    }
                    else
                    {
                        ProcPlanEndDateParameter.DbType = DbType.DateTime;
                        ProcPlanEndDateParameter.Size = -1;
                        ProcPlanEndDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcPlanEndDateParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void CPCreateProcurementItemDetail(string ProcReqSerialNumber, string TypeCode, string IsPlannedPurchase, string TypeOfRequest, string ProcurementMethod, string ContractPurchaseType, string EstimatedValue, string ScopeOfWork, string TenderDuration, string IsProjectRelated, string CommencementDate, string ContractNumber, string CostCenterNumber, string ApprovedAmount, string CostType, string Assignedto, string CreatedBy, string CreationDate, string TenantId, string DeptId, string SectorId, string RequestorId, string WfInstanceSId, string ProcReqSerialByType, string ProcReqTitle)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.CreateProcurementItemDetails :ProcReqSerialNumber, :TypeCode, :IsPlannedPurchase, :TypeOfRequest, :ProcurementMethod, :ContractPurchaseType, :EstimatedValue, :ScopeOfWork, :TenderDuration, :IsProjectRelated, :CommencementDate, :ContractNumber, :CostCenterNumber, :ApprovedAmount, :CostType, :Assignedto, :CreatedBy, :CreationDate, :TenantId, :DeptId, :SectorId, :RequestorId, :WfInstanceSId, :ProcReqSerialByType, :ProcReqTitle";

                    DbParameter ProcReqSerialNumberParameter = cmd.CreateParameter();
                    ProcReqSerialNumberParameter.ParameterName = "ProcReqSerialNumber";
                    ProcReqSerialNumberParameter.Direction = ParameterDirection.Input;
                    if (ProcReqSerialNumber != null)
                    {
                        ProcReqSerialNumberParameter.Value = ProcReqSerialNumber;
                    }
                    else
                    {
                        ProcReqSerialNumberParameter.DbType = DbType.String;
                        ProcReqSerialNumberParameter.Size = -1;
                        ProcReqSerialNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcReqSerialNumberParameter);

                    DbParameter TypeCodeParameter = cmd.CreateParameter();
                    TypeCodeParameter.ParameterName = "TypeCode";
                    TypeCodeParameter.Direction = ParameterDirection.Input;
                    if (TypeCode != null)
                    {
                        TypeCodeParameter.Value = TypeCode;
                    }
                    else
                    {
                        TypeCodeParameter.DbType = DbType.String;
                        TypeCodeParameter.Size = -1;
                        TypeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TypeCodeParameter);

                    DbParameter IsPlannedPurchaseParameter = cmd.CreateParameter();
                    IsPlannedPurchaseParameter.ParameterName = "IsPlannedPurchase";
                    IsPlannedPurchaseParameter.Direction = ParameterDirection.Input;
                    if (IsPlannedPurchase != null)
                    {
                        IsPlannedPurchaseParameter.Value = IsPlannedPurchase;
                    }
                    else
                    {
                        IsPlannedPurchaseParameter.DbType = DbType.String;
                        IsPlannedPurchaseParameter.Size = -1;
                        IsPlannedPurchaseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsPlannedPurchaseParameter);

                    DbParameter TypeOfRequestParameter = cmd.CreateParameter();
                    TypeOfRequestParameter.ParameterName = "TypeOfRequest";
                    TypeOfRequestParameter.Direction = ParameterDirection.Input;
                    if (TypeOfRequest != null)
                    {
                        TypeOfRequestParameter.Value = TypeOfRequest;
                    }
                    else
                    {
                        TypeOfRequestParameter.DbType = DbType.String;
                        TypeOfRequestParameter.Size = -1;
                        TypeOfRequestParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TypeOfRequestParameter);

                    DbParameter ProcurementMethodParameter = cmd.CreateParameter();
                    ProcurementMethodParameter.ParameterName = "ProcurementMethod";
                    ProcurementMethodParameter.Direction = ParameterDirection.Input;
                    if (ProcurementMethod != null)
                    {
                        ProcurementMethodParameter.Value = ProcurementMethod;
                    }
                    else
                    {
                        ProcurementMethodParameter.DbType = DbType.String;
                        ProcurementMethodParameter.Size = -1;
                        ProcurementMethodParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcurementMethodParameter);

                    DbParameter ContractPurchaseTypeParameter = cmd.CreateParameter();
                    ContractPurchaseTypeParameter.ParameterName = "ContractPurchaseType";
                    ContractPurchaseTypeParameter.Direction = ParameterDirection.Input;
                    if (ContractPurchaseType != null)
                    {
                        ContractPurchaseTypeParameter.Value = ContractPurchaseType;
                    }
                    else
                    {
                        ContractPurchaseTypeParameter.DbType = DbType.String;
                        ContractPurchaseTypeParameter.Size = -1;
                        ContractPurchaseTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ContractPurchaseTypeParameter);

                    DbParameter EstimatedValueParameter = cmd.CreateParameter();
                    EstimatedValueParameter.ParameterName = "EstimatedValue";
                    EstimatedValueParameter.Direction = ParameterDirection.Input;
                    if (EstimatedValue != null)
                    {
                        EstimatedValueParameter.Value = EstimatedValue;
                    }
                    else
                    {
                        EstimatedValueParameter.DbType = DbType.String;
                        EstimatedValueParameter.Size = -1;
                        EstimatedValueParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EstimatedValueParameter);

                    DbParameter ScopeOfWorkParameter = cmd.CreateParameter();
                    ScopeOfWorkParameter.ParameterName = "ScopeOfWork";
                    ScopeOfWorkParameter.Direction = ParameterDirection.Input;
                    if (ScopeOfWork != null)
                    {
                        ScopeOfWorkParameter.Value = ScopeOfWork;
                    }
                    else
                    {
                        ScopeOfWorkParameter.DbType = DbType.String;
                        ScopeOfWorkParameter.Size = -1;
                        ScopeOfWorkParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ScopeOfWorkParameter);

                    DbParameter TenderDurationParameter = cmd.CreateParameter();
                    TenderDurationParameter.ParameterName = "TenderDuration";
                    TenderDurationParameter.Direction = ParameterDirection.Input;
                    if (TenderDuration != null)
                    {
                        TenderDurationParameter.Value = TenderDuration;
                    }
                    else
                    {
                        TenderDurationParameter.DbType = DbType.String;
                        TenderDurationParameter.Size = -1;
                        TenderDurationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TenderDurationParameter);

                    DbParameter IsProjectRelatedParameter = cmd.CreateParameter();
                    IsProjectRelatedParameter.ParameterName = "IsProjectRelated";
                    IsProjectRelatedParameter.Direction = ParameterDirection.Input;
                    if (IsProjectRelated != null)
                    {
                        IsProjectRelatedParameter.Value = IsProjectRelated;
                    }
                    else
                    {
                        IsProjectRelatedParameter.DbType = DbType.String;
                        IsProjectRelatedParameter.Size = -1;
                        IsProjectRelatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(IsProjectRelatedParameter);

                    DbParameter CommencementDateParameter = cmd.CreateParameter();
                    CommencementDateParameter.ParameterName = "CommencementDate";
                    CommencementDateParameter.Direction = ParameterDirection.Input;
                    if (CommencementDate != null)
                    {
                        CommencementDateParameter.Value = CommencementDate;
                    }
                    else
                    {
                        CommencementDateParameter.DbType = DbType.String;
                        CommencementDateParameter.Size = -1;
                        CommencementDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CommencementDateParameter);

                    DbParameter ContractNumberParameter = cmd.CreateParameter();
                    ContractNumberParameter.ParameterName = "ContractNumber";
                    ContractNumberParameter.Direction = ParameterDirection.Input;
                    if (ContractNumber != null)
                    {
                        ContractNumberParameter.Value = ContractNumber;
                    }
                    else
                    {
                        ContractNumberParameter.DbType = DbType.String;
                        ContractNumberParameter.Size = -1;
                        ContractNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ContractNumberParameter);

                    DbParameter CostCenterNumberParameter = cmd.CreateParameter();
                    CostCenterNumberParameter.ParameterName = "CostCenterNumber";
                    CostCenterNumberParameter.Direction = ParameterDirection.Input;
                    if (CostCenterNumber != null)
                    {
                        CostCenterNumberParameter.Value = CostCenterNumber;
                    }
                    else
                    {
                        CostCenterNumberParameter.DbType = DbType.String;
                        CostCenterNumberParameter.Size = -1;
                        CostCenterNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CostCenterNumberParameter);

                    DbParameter ApprovedAmountParameter = cmd.CreateParameter();
                    ApprovedAmountParameter.ParameterName = "ApprovedAmount";
                    ApprovedAmountParameter.Direction = ParameterDirection.Input;
                    if (ApprovedAmount != null)
                    {
                        ApprovedAmountParameter.Value = ApprovedAmount;
                    }
                    else
                    {
                        ApprovedAmountParameter.DbType = DbType.String;
                        ApprovedAmountParameter.Size = -1;
                        ApprovedAmountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ApprovedAmountParameter);

                    DbParameter CostTypeParameter = cmd.CreateParameter();
                    CostTypeParameter.ParameterName = "CostType";
                    CostTypeParameter.Direction = ParameterDirection.Input;
                    if (CostType != null)
                    {
                        CostTypeParameter.Value = CostType;
                    }
                    else
                    {
                        CostTypeParameter.DbType = DbType.String;
                        CostTypeParameter.Size = -1;
                        CostTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CostTypeParameter);

                    DbParameter AssignedtoParameter = cmd.CreateParameter();
                    AssignedtoParameter.ParameterName = "Assignedto";
                    AssignedtoParameter.Direction = ParameterDirection.Input;
                    if (Assignedto != null)
                    {
                        AssignedtoParameter.Value = Assignedto;
                    }
                    else
                    {
                        AssignedtoParameter.DbType = DbType.String;
                        AssignedtoParameter.Size = -1;
                        AssignedtoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(AssignedtoParameter);

                    DbParameter CreatedByParameter = cmd.CreateParameter();
                    CreatedByParameter.ParameterName = "CreatedBy";
                    CreatedByParameter.Direction = ParameterDirection.Input;
                    if (CreatedBy != null)
                    {
                        CreatedByParameter.Value = CreatedBy;
                    }
                    else
                    {
                        CreatedByParameter.DbType = DbType.String;
                        CreatedByParameter.Size = -1;
                        CreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CreatedByParameter);

                    DbParameter CreationDateParameter = cmd.CreateParameter();
                    CreationDateParameter.ParameterName = "CreationDate";
                    CreationDateParameter.Direction = ParameterDirection.Input;
                    if (CreationDate != null)
                    {
                        CreationDateParameter.Value = CreationDate;
                    }
                    else
                    {
                        CreationDateParameter.DbType = DbType.String;
                        CreationDateParameter.Size = -1;
                        CreationDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CreationDateParameter);

                    DbParameter TenantIdParameter = cmd.CreateParameter();
                    TenantIdParameter.ParameterName = "TenantId";
                    TenantIdParameter.Direction = ParameterDirection.Input;
                    if (TenantId != null)
                    {
                        TenantIdParameter.Value = TenantId;
                    }
                    else
                    {
                        TenantIdParameter.DbType = DbType.String;
                        TenantIdParameter.Size = -1;
                        TenantIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TenantIdParameter);

                    DbParameter DeptIdParameter = cmd.CreateParameter();
                    DeptIdParameter.ParameterName = "DeptId";
                    DeptIdParameter.Direction = ParameterDirection.Input;
                    if (DeptId != null)
                    {
                        DeptIdParameter.Value = DeptId;
                    }
                    else
                    {
                        DeptIdParameter.DbType = DbType.String;
                        DeptIdParameter.Size = -1;
                        DeptIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DeptIdParameter);

                    DbParameter SectorIdParameter = cmd.CreateParameter();
                    SectorIdParameter.ParameterName = "SectorId";
                    SectorIdParameter.Direction = ParameterDirection.Input;
                    if (SectorId != null)
                    {
                        SectorIdParameter.Value = SectorId;
                    }
                    else
                    {
                        SectorIdParameter.DbType = DbType.String;
                        SectorIdParameter.Size = -1;
                        SectorIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SectorIdParameter);

                    DbParameter RequestorIdParameter = cmd.CreateParameter();
                    RequestorIdParameter.ParameterName = "RequestorId";
                    RequestorIdParameter.Direction = ParameterDirection.Input;
                    if (RequestorId != null)
                    {
                        RequestorIdParameter.Value = RequestorId;
                    }
                    else
                    {
                        RequestorIdParameter.DbType = DbType.String;
                        RequestorIdParameter.Size = -1;
                        RequestorIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequestorIdParameter);

                    DbParameter WfInstanceSIdParameter = cmd.CreateParameter();
                    WfInstanceSIdParameter.ParameterName = "WfInstanceSId";
                    WfInstanceSIdParameter.Direction = ParameterDirection.Input;
                    if (WfInstanceSId != null)
                    {
                        WfInstanceSIdParameter.Value = WfInstanceSId;
                    }
                    else
                    {
                        WfInstanceSIdParameter.DbType = DbType.String;
                        WfInstanceSIdParameter.Size = -1;
                        WfInstanceSIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WfInstanceSIdParameter);

                    DbParameter ProcReqSerialByTypeParameter = cmd.CreateParameter();
                    ProcReqSerialByTypeParameter.ParameterName = "ProcReqSerialByType";
                    ProcReqSerialByTypeParameter.Direction = ParameterDirection.Input;
                    if (ProcReqSerialByType != null)
                    {
                        ProcReqSerialByTypeParameter.Value = ProcReqSerialByType;
                    }
                    else
                    {
                        ProcReqSerialByTypeParameter.DbType = DbType.String;
                        ProcReqSerialByTypeParameter.Size = -1;
                        ProcReqSerialByTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcReqSerialByTypeParameter);

                    DbParameter ProcReqTitleParameter = cmd.CreateParameter();
                    ProcReqTitleParameter.ParameterName = "ProcReqTitle";
                    ProcReqTitleParameter.Direction = ParameterDirection.Input;
                    if (ProcReqTitle != null)
                    {
                        ProcReqTitleParameter.Value = ProcReqTitle;
                    }
                    else
                    {
                        ProcReqTitleParameter.DbType = DbType.String;
                        ProcReqTitleParameter.Size = -1;
                        ProcReqTitleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcReqTitleParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<CPCreateWorkflowInstanceResult> dbDboCreateWorkflowInstance(string InstanceSId, System.Nullable<long> MetadataId, System.Nullable<int> InstanceStatus, string CycleId, string StepId, string StepNameCaption, string StepCaption, System.Nullable<long> RequesterId, string BaseClass, string Data, string instancebrief)
        {

            List<CPCreateWorkflowInstanceResult> result = new List<CPCreateWorkflowInstanceResult>();

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.CreateWorkflowInstance :InstanceSId, :MetadataId, :InstanceStatus, :CycleId, :StepId, :StepNameCaption, :StepCaption, :RequesterId, :BaseClass, :Data, :instancebrief";

                    DbParameter InstanceSIdParameter = cmd.CreateParameter();
                    InstanceSIdParameter.ParameterName = "InstanceSId";
                    InstanceSIdParameter.Direction = ParameterDirection.Input;
                    if (InstanceSId != null)
                    {
                        InstanceSIdParameter.Value = InstanceSId;
                    }
                    else
                    {
                        InstanceSIdParameter.DbType = DbType.String;
                        InstanceSIdParameter.Size = -1;
                        InstanceSIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InstanceSIdParameter);

                    DbParameter MetadataIdParameter = cmd.CreateParameter();
                    MetadataIdParameter.ParameterName = "MetadataId";
                    MetadataIdParameter.Direction = ParameterDirection.Input;
                    if (MetadataId.HasValue)
                    {
                        MetadataIdParameter.Value = MetadataId.Value;
                    }
                    else
                    {
                        MetadataIdParameter.DbType = DbType.Int64;
                        MetadataIdParameter.Size = -1;
                        MetadataIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(MetadataIdParameter);

                    DbParameter InstanceStatusParameter = cmd.CreateParameter();
                    InstanceStatusParameter.ParameterName = "InstanceStatus";
                    InstanceStatusParameter.Direction = ParameterDirection.Input;
                    if (InstanceStatus.HasValue)
                    {
                        InstanceStatusParameter.Value = InstanceStatus.Value;
                    }
                    else
                    {
                        InstanceStatusParameter.DbType = DbType.Int32;
                        InstanceStatusParameter.Size = -1;
                        InstanceStatusParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InstanceStatusParameter);

                    DbParameter CycleIdParameter = cmd.CreateParameter();
                    CycleIdParameter.ParameterName = "CycleId";
                    CycleIdParameter.Direction = ParameterDirection.Input;
                    if (CycleId != null)
                    {
                        CycleIdParameter.Value = CycleId;
                    }
                    else
                    {
                        CycleIdParameter.DbType = DbType.String;
                        CycleIdParameter.Size = -1;
                        CycleIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(CycleIdParameter);

                    DbParameter StepIdParameter = cmd.CreateParameter();
                    StepIdParameter.ParameterName = "StepId";
                    StepIdParameter.Direction = ParameterDirection.Input;
                    if (StepId != null)
                    {
                        StepIdParameter.Value = StepId;
                    }
                    else
                    {
                        StepIdParameter.DbType = DbType.String;
                        StepIdParameter.Size = -1;
                        StepIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StepIdParameter);

                    DbParameter StepNameCaptionParameter = cmd.CreateParameter();
                    StepNameCaptionParameter.ParameterName = "StepNameCaption";
                    StepNameCaptionParameter.Direction = ParameterDirection.Input;
                    if (StepNameCaption != null)
                    {
                        StepNameCaptionParameter.Value = StepNameCaption;
                    }
                    else
                    {
                        StepNameCaptionParameter.DbType = DbType.String;
                        StepNameCaptionParameter.Size = -1;
                        StepNameCaptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StepNameCaptionParameter);

                    DbParameter StepCaptionParameter = cmd.CreateParameter();
                    StepCaptionParameter.ParameterName = "StepCaption";
                    StepCaptionParameter.Direction = ParameterDirection.Input;
                    if (StepCaption != null)
                    {
                        StepCaptionParameter.Value = StepCaption;
                    }
                    else
                    {
                        StepCaptionParameter.DbType = DbType.String;
                        StepCaptionParameter.Size = -1;
                        StepCaptionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StepCaptionParameter);

                    DbParameter RequesterIdParameter = cmd.CreateParameter();
                    RequesterIdParameter.ParameterName = "RequesterId";
                    RequesterIdParameter.Direction = ParameterDirection.Input;
                    if (RequesterId.HasValue)
                    {
                        RequesterIdParameter.Value = RequesterId.Value;
                    }
                    else
                    {
                        RequesterIdParameter.DbType = DbType.Int64;
                        RequesterIdParameter.Size = -1;
                        RequesterIdParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RequesterIdParameter);

                    DbParameter BaseClassParameter = cmd.CreateParameter();
                    BaseClassParameter.ParameterName = "BaseClass";
                    BaseClassParameter.Direction = ParameterDirection.Input;
                    if (BaseClass != null)
                    {
                        BaseClassParameter.Value = BaseClass;
                    }
                    else
                    {
                        BaseClassParameter.DbType = DbType.String;
                        BaseClassParameter.Size = -1;
                        BaseClassParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(BaseClassParameter);

                    DbParameter DataParameter = cmd.CreateParameter();
                    DataParameter.ParameterName = "Data";
                    DataParameter.Direction = ParameterDirection.Input;
                    if (Data != null)
                    {
                        DataParameter.Value = Data;
                    }
                    else
                    {
                        DataParameter.DbType = DbType.String;
                        DataParameter.Size = -1;
                        DataParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DataParameter);

                    DbParameter instancebriefParameter = cmd.CreateParameter();
                    instancebriefParameter.ParameterName = "instancebrief";
                    instancebriefParameter.Direction = ParameterDirection.Input;
                    if (instancebrief != null)
                    {
                        instancebriefParameter.Value = instancebrief;
                    }
                    else
                    {
                        instancebriefParameter.DbType = DbType.String;
                        instancebriefParameter.Size = -1;
                        instancebriefParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(instancebriefParameter);

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            CPCreateWorkflowInstanceResult row = new CPCreateWorkflowInstanceResult();
                            if (!reader.IsDBNull(reader.GetOrdinal("column0")))
                                row.Column0 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"column0")), typeof(decimal));
                            else
                                row.Column0 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<CPFileManagerConsoleGetDataFromWorkResult> CPFileManagerConsoleGetDataFromWork()
        {

            List<CPFileManagerConsoleGetDataFromWorkResult> result = new List<CPFileManagerConsoleGetDataFromWorkResult>();

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.FileManagerConsoleGetDataFromWork";

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            CPFileManagerConsoleGetDataFromWorkResult row = new CPFileManagerConsoleGetDataFromWorkResult();
                            if (!reader.IsDBNull(reader.GetOrdinal("INSTANCEID")))
                                row.INSTANCEID = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INSTANCEID")), typeof(long));

                            if (!reader.IsDBNull(reader.GetOrdinal("DATA")))
                                row.DATA = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DATA")), typeof(string));
                            else
                                row.DATA = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("BaseClass")))
                                row.BaseClass = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"BaseClass")), typeof(string));

                            if (!reader.IsDBNull(reader.GetOrdinal("InstanceSId")))
                                row.InstanceSId = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"InstanceSId")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<CPFileManagerConsoleGetIndRowDataInResult> CPFileManagerConsoleGetIndRowDataIn(string InstanceID)
        {

            List<CPFileManagerConsoleGetIndRowDataInResult> result = new List<CPFileManagerConsoleGetIndRowDataInResult>();

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.FileManagerConsoleGetIndRowDataIns :InstanceID";

                    DbParameter InstanceIDParameter = cmd.CreateParameter();
                    InstanceIDParameter.ParameterName = "InstanceID";
                    InstanceIDParameter.Direction = ParameterDirection.Input;
                    if (InstanceID != null)
                    {
                        InstanceIDParameter.Value = InstanceID;
                    }
                    else
                    {
                        InstanceIDParameter.DbType = DbType.String;
                        InstanceIDParameter.Size = -1;
                        InstanceIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InstanceIDParameter);

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            CPFileManagerConsoleGetIndRowDataInResult row = new CPFileManagerConsoleGetIndRowDataInResult();
                            if (!reader.IsDBNull(reader.GetOrdinal("Data")))
                                row.Data = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Data")), typeof(string));
                            else
                                row.Data = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void CPFileManagerConsoleupatewfInstance(string Data, System.Nullable<int> InsID)
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.FileManagerConsoleupatewfInstance :Data, :InsID";

                    DbParameter DataParameter = cmd.CreateParameter();
                    DataParameter.ParameterName = "Data";
                    DataParameter.Direction = ParameterDirection.Input;
                    if (Data != null)
                    {
                        DataParameter.Value = Data;
                    }
                    else
                    {
                        DataParameter.DbType = DbType.String;
                        DataParameter.Size = -1;
                        DataParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(DataParameter);

                    DbParameter InsIDParameter = cmd.CreateParameter();
                    InsIDParameter.ParameterName = "InsID";
                    InsIDParameter.Direction = ParameterDirection.Input;
                    if (InsID.HasValue)
                    {
                        InsIDParameter.Value = InsID.Value;
                    }
                    else
                    {
                        InsIDParameter.DbType = DbType.Int32;
                        InsIDParameter.Size = -1;
                        InsIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(InsIDParameter);

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<CPTempprocResult> CPTempproc(string ins)
        {

            List<CPTempprocResult> result = new List<CPTempprocResult>();

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.tempproc :ins";

                    DbParameter insParameter = cmd.CreateParameter();
                    insParameter.ParameterName = "ins";
                    insParameter.Direction = ParameterDirection.Input;
                    if (ins != null)
                    {
                        insParameter.Value = ins;
                    }
                    else
                    {
                        insParameter.DbType = DbType.String;
                        insParameter.Size = -1;
                        insParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(insParameter);

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            CPTempprocResult row = new CPTempprocResult();
                            if (!reader.IsDBNull(reader.GetOrdinal("dATA")))
                                row.DATA = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dATA")), typeof(string));
                            else
                                row.DATA = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void CPUpdateSSISProcSeiral()
        {


            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.UpdateSSISProcSeirals";

                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public string CPRemoveNonAlphaCharacter(string Temp)
        {

            string result;

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"select dbo.RemoveNonAlphaCharacters(:Temp) as return_value";

                    DbParameter TempParameter = cmd.CreateParameter();
                    TempParameter.ParameterName = "Temp";
                    TempParameter.Direction = ParameterDirection.Input;
                    if (Temp != null)
                    {
                        TempParameter.Value = Temp;
                    }
                    else
                    {
                        TempParameter.DbType = DbType.String;
                        TempParameter.Size = -1;
                        TempParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TempParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    result = (string)returnValueParameter.Value;
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<dbDboProfilesGridResult> dbDboProfilesGrid()
        {

            List<dbDboProfilesGridResult> result = new List<dbDboProfilesGridResult>();

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.ProfilesGrid";

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            dbDboProfilesGridResult row = new dbDboProfilesGridResult();
                            if (!reader.IsDBNull(reader.GetOrdinal("UserId")))
                                row.UserId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UserId")), typeof(long));

                            if (!reader.IsDBNull(reader.GetOrdinal("UserSId")))
                                row.UserSId = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UserSId")), typeof(string));

                            if (!reader.IsDBNull(reader.GetOrdinal("TenantId")))
                                row.TenantId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TenantId")), typeof(long));
                            else
                                row.TenantId = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("UserName")))
                                row.UserName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UserName")), typeof(string));
                            else
                                row.UserName = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("Password")))
                                row.Password = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Password")), typeof(string));

                            if (!reader.IsDBNull(reader.GetOrdinal("EmailAddress")))
                                row.EmailAddress = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EmailAddress")), typeof(string));

                            if (!reader.IsDBNull(reader.GetOrdinal("EmployeeId")))
                                row.EmployeeId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EmployeeId")), typeof(int));
                            else
                                row.EmployeeId = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("Title")))
                                row.Title = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Title")), typeof(string));
                            else
                                row.Title = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("FirstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FirstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("SecondName")))
                                row.SecondName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SecondName")), typeof(string));
                            else
                                row.SecondName = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("ThirdName")))
                                row.ThirdName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ThirdName")), typeof(string));
                            else
                                row.ThirdName = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("LastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("FullNameEn")))
                                row.FullNameEn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FullNameEn")), typeof(string));
                            else
                                row.FullNameEn = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("FullNameAr")))
                                row.FullNameAr = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FullNameAr")), typeof(string));
                            else
                                row.FullNameAr = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("IsManager")))
                                row.IsManager = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"IsManager")), typeof(bool));
                            else
                                row.IsManager = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("ManagerId")))
                                row.ManagerId = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ManagerId")), typeof(long));
                            else
                                row.ManagerId = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgUnitId")))
                                row.OrgUnitId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgUnitId")), typeof(int));
                            else
                                row.OrgUnitId = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv1Id")))
                                row.OrgLv1Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv1Id")), typeof(int));
                            else
                                row.OrgLv1Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv2Id")))
                                row.OrgLv2Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv2Id")), typeof(int));
                            else
                                row.OrgLv2Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv3Id")))
                                row.OrgLv3Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv3Id")), typeof(int));
                            else
                                row.OrgLv3Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv4Id")))
                                row.OrgLv4Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv4Id")), typeof(int));
                            else
                                row.OrgLv4Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv5Id")))
                                row.OrgLv5Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv5Id")), typeof(int));
                            else
                                row.OrgLv5Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv6Id")))
                                row.OrgLv6Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv6Id")), typeof(int));
                            else
                                row.OrgLv6Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("OrgLv7Id")))
                                row.OrgLv7Id = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"OrgLv7Id")), typeof(int));
                            else
                                row.OrgLv7Id = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("DesignationId")))
                                row.DesignationId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DesignationId")), typeof(int));
                            else
                                row.DesignationId = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("DesignationEn")))
                                row.DesignationEn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DesignationEn")), typeof(string));
                            else
                                row.DesignationEn = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("DesignationAr")))
                                row.DesignationAr = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DesignationAr")), typeof(string));
                            else
                                row.DesignationAr = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("Grade")))
                                row.Grade = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Grade")), typeof(int));
                            else
                                row.Grade = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("Gender")))
                                row.Gender = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gender")), typeof(string));
                            else
                                row.Gender = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("DateOfBirth")))
                                row.DateOfBirth = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DateOfBirth")), typeof(System.DateTime));
                            else
                                row.DateOfBirth = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("NationalityId")))
                                row.NationalityId = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NationalityId")), typeof(int));
                            else
                                row.NationalityId = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("JoinedDate")))
                                row.JoinedDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"JoinedDate")), typeof(System.DateTime));
                            else
                                row.JoinedDate = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("TerminationDate")))
                                row.TerminationDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TerminationDate")), typeof(System.DateTime));
                            else
                                row.TerminationDate = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("IsContractor")))
                                row.IsContractor = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"IsContractor")), typeof(bool));
                            else
                                row.IsContractor = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("IsArabic")))
                                row.IsArabic = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"IsArabic")), typeof(bool));
                            else
                                row.IsArabic = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("IsActive")))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"IsActive")), typeof(bool));
                            else
                                row.IsActive = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("IsLocked")))
                                row.IsLocked = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"IsLocked")), typeof(bool));
                            else
                                row.IsLocked = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("AccountType")))
                                row.AccountType = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"AccountType")), typeof(int));
                            else
                                row.AccountType = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("LastLoginDate")))
                                row.LastLoginDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LastLoginDate")), typeof(System.DateTime));
                            else
                                row.LastLoginDate = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("CreationDate")))
                                row.CreationDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CreationDate")), typeof(System.DateTime));
                            else
                                row.CreationDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<dbDboProfileUserResult> dbDboProfileUser(string Title)
        {

            List<dbDboProfileUserResult> result = new List<dbDboProfileUserResult>();

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"exec dbo.ProfileUser :Title";

                    DbParameter TitleParameter = cmd.CreateParameter();
                    TitleParameter.ParameterName = "Title";
                    TitleParameter.Direction = ParameterDirection.Input;
                    if (Title != null)
                    {
                        TitleParameter.Value = Title;
                    }
                    else
                    {
                        TitleParameter.DbType = DbType.String;
                        TitleParameter.Size = -1;
                        TitleParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(TitleParameter);

                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            dbDboProfileUserResult row = new dbDboProfileUserResult();
                            if (!reader.IsDBNull(reader.GetOrdinal("FullNameEn")))
                                row.FullNameEn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FullNameEn")), typeof(string));
                            else
                                row.FullNameEn = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("UserName")))
                                row.UserName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"UserName")), typeof(string));
                            else
                                row.UserName = null;

                            if (!reader.IsDBNull(reader.GetOrdinal("EmailAddress")))
                                row.EmailAddress = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"EmailAddress")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.CPEmailTemplateMapping(modelBuilder);
            this.CustomizeCPEmailTemplateMapping(modelBuilder);

            this.CPEntityMapping(modelBuilder);
            this.CustomizeCPEntityMapping(modelBuilder);

            this.CPExceptionLogMapping(modelBuilder);
            this.CustomizeCPExceptionLogMapping(modelBuilder);

            this.CPGroupRoleMapping(modelBuilder);
            this.CustomizeCPGroupRoleMapping(modelBuilder);

            this.CPGroupMapping(modelBuilder);
            this.CustomizeCPGroupMapping(modelBuilder);

            this.CPGroupUserMapping(modelBuilder);
            this.CustomizeCPGroupUserMapping(modelBuilder);

            this.CPLanguageDictionaryMapping(modelBuilder);
            this.CustomizeCPLanguageDictionaryMapping(modelBuilder);

            this.CPLookupCategoryMapping(modelBuilder);
            this.CustomizeCPLookupCategoryMapping(modelBuilder);

            this.CPLookupMapping(modelBuilder);
            this.CustomizeCPLookupMapping(modelBuilder);

            this.CPOnlineSessionMapping(modelBuilder);
            this.CustomizeCPOnlineSessionMapping(modelBuilder);

            this.CPOutEmailMapping(modelBuilder);
            this.CustomizeCPOutEmailMapping(modelBuilder);

            this.CPRoleMapping(modelBuilder);
            this.CustomizeCPRoleMapping(modelBuilder);

            this.CPTenantDomainMapping(modelBuilder);
            this.CustomizeCPTenantDomainMapping(modelBuilder);

            this.CPTenantMapping(modelBuilder);
            this.CustomizeCPTenantMapping(modelBuilder);

            this.CPTmpAssigneeMapping(modelBuilder);
            this.CustomizeCPTmpAssigneeMapping(modelBuilder);

            this.CPTmpInstanceMapping(modelBuilder);
            this.CustomizeCPTmpInstanceMapping(modelBuilder);

            this.CPTmpInstanceStatuMapping(modelBuilder);
            this.CustomizeCPTmpInstanceStatuMapping(modelBuilder);

            this.CPTmpMetadataMapping(modelBuilder);
            this.CustomizeCPTmpMetadataMapping(modelBuilder);

            this.CPTmpWorkflowcategoryMapping(modelBuilder);
            this.CustomizeCPTmpWorkflowcategoryMapping(modelBuilder);

            this.CPUnitMapping(modelBuilder);
            this.CustomizeCPUnitMapping(modelBuilder);

            this.CPUnitsOldMapping(modelBuilder);
            this.CustomizeCPUnitsOldMapping(modelBuilder);

            this.CPUnitTypeMapping(modelBuilder);
            this.CustomizeCPUnitTypeMapping(modelBuilder);

            this.CPUserDelegationMapping(modelBuilder);
            this.CustomizeCPUserDelegationMapping(modelBuilder);

            this.CPUserMapping(modelBuilder);
            this.CustomizeCPUserMapping(modelBuilder);

            this.CPUsersBeforeSyncMapping(modelBuilder);
            this.CustomizeCPUsersBeforeSyncMapping(modelBuilder);

            this.CPUserTempAssignmentMapping(modelBuilder);
            this.CustomizeCPUserTempAssignmentMapping(modelBuilder);

            this.CPVendorMapping(modelBuilder);
            this.CustomizeCPVendorMapping(modelBuilder);

            this.CPWFInstancesFollowupMapping(modelBuilder);
            this.CustomizeCPWFInstancesFollowupMapping(modelBuilder);

            this.CPWorkflowAssigneeMapping(modelBuilder);
            this.CustomizeCPWorkflowAssigneeMapping(modelBuilder);

            this.CPWorkflowCategoryMapping(modelBuilder);
            this.CustomizeCPWorkflowCategoryMapping(modelBuilder);

            this.CPWorkflowInstanceMapping(modelBuilder);
            this.CustomizeCPWorkflowInstanceMapping(modelBuilder);

            this.CPWorkflowInstanceStatusMapping(modelBuilder);
            this.CustomizeCPWorkflowInstanceStatusMapping(modelBuilder);

            this.dbCoreWorkflowMetadataMapping(modelBuilder);
            this.CustomizedbCoreWorkflowMetadataMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region CPEmailTemplate Mapping

        private void CPEmailTemplateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPEmailTemplate>().ToTable(@"EmailTemplates", @"Core");
            modelBuilder.Entity<CPEmailTemplate>().Property<long>(x => x.EmailTemplateId).HasColumnName(@"EmailTemplateId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPEmailTemplate>().Property<string>(x => x.EmailTemplateSId).HasColumnName(@"EmailTemplateSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPEmailTemplate>().Property<string>(x => x.EmailTemplateKey).HasColumnName(@"EmailTemplateKey").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPEmailTemplate>().Property<string>(x => x.Template).HasColumnName(@"Template").HasColumnType(@"ntext").IsRequired().ValueGeneratedNever().HasMaxLength(1073741823);
            modelBuilder.Entity<CPEmailTemplate>().HasKey(@"EmailTemplateId");
        }

        partial void CustomizeCPEmailTemplateMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPEntity Mapping

        private void CPEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPEntity>().ToTable(@"Entities", @"Core");
            modelBuilder.Entity<CPEntity>().Property<long>(x => x.EntityId).HasColumnName(@"EntityId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPEntity>().Property<string>(x => x.EnglishName).HasColumnName(@"EnglishName").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<CPEntity>().Property<string>(x => x.ArabicName).HasColumnName(@"ArabicName").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<CPEntity>().Property<string>(x => x.Abbreviation).HasColumnName(@"Abbreviation").HasColumnType(@"nvarchar(12)").IsRequired().ValueGeneratedNever().HasMaxLength(12);
            modelBuilder.Entity<CPEntity>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPEntity>().HasKey(@"EntityId");
        }

        partial void CustomizeCPEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPExceptionLog Mapping

        private void CPExceptionLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPExceptionLog>().ToTable(@"ExceptionLog", @"Core");
            modelBuilder.Entity<CPExceptionLog>().Property<long>(x => x.ExId).HasColumnName(@"ExId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPExceptionLog>().Property<string>(x => x.ExMessage).HasColumnName(@"ExMessage").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPExceptionLog>().Property<string>(x => x.Stacktrace).HasColumnName(@"Stacktrace").HasColumnType(@"varchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPExceptionLog>().Property<System.Nullable<System.DateTime>>(x => x.Createddate).HasColumnName(@"createddate").HasColumnType(@"datetime").ValueGeneratedNever().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<CPExceptionLog>().HasKey(@"ExId");
        }

        partial void CustomizeCPExceptionLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPGroupRole Mapping

        private void CPGroupRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPGroupRole>().ToTable(@"GroupRoles", @"Core");
            modelBuilder.Entity<CPGroupRole>().Property<long>(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPGroupRole>().Property<long>(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPGroupRole>().HasKey(@"GroupId", @"RoleId");
        }

        partial void CustomizeCPGroupRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPGroup Mapping

        private void CPGroupMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPGroup>().ToTable(@"Groups", @"Core");
            modelBuilder.Entity<CPGroup>().Property<long>(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPGroup>().Property<System.Nullable<long>>(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPGroup>().Property<string>(x => x.GroupSId).HasColumnName(@"GroupSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPGroup>().Property<string>(x => x.GroupName).HasColumnName(@"GroupName").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<CPGroup>().Property<string>(x => x.GroupCode).HasColumnName(@"GroupCode").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPGroup>().HasKey(@"GroupId");
        }

        partial void CustomizeCPGroupMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPGroupUser Mapping

        private void CPGroupUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPGroupUser>().ToTable(@"GroupUsers", @"Core");
            modelBuilder.Entity<CPGroupUser>().Property<long>(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPGroupUser>().Property<long>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPGroupUser>().HasKey(@"GroupId", @"UserId");
        }

        partial void CustomizeCPGroupUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPLanguageDictionary Mapping

        private void CPLanguageDictionaryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPLanguageDictionary>().ToTable(@"LanguageDictionaries", @"Core");
            modelBuilder.Entity<CPLanguageDictionary>().Property<long>(x => x.LanguageDictionaryId).HasColumnName(@"LanguageDictionaryId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPLanguageDictionary>().Property<System.Nullable<long>>(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPLanguageDictionary>().Property<string>(x => x.LanguageDictionarySId).HasColumnName(@"LanguageDictionarySId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPLanguageDictionary>().Property<string>(x => x.LanguageKey).HasColumnName(@"LanguageKey").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPLanguageDictionary>().Property<string>(x => x.English).HasColumnName(@"English").HasColumnType(@"ntext").IsRequired().ValueGeneratedNever().HasMaxLength(1073741823);
            modelBuilder.Entity<CPLanguageDictionary>().Property<string>(x => x.Arabic).HasColumnName(@"Arabic").HasColumnType(@"ntext").IsRequired().ValueGeneratedNever().HasMaxLength(1073741823);
            modelBuilder.Entity<CPLanguageDictionary>().HasKey(@"LanguageDictionaryId");
        }

        partial void CustomizeCPLanguageDictionaryMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPLookupCategory Mapping

        private void CPLookupCategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPLookupCategory>().ToTable(@"LookupCategories", @"Core");
            modelBuilder.Entity<CPLookupCategory>().Property<long>(x => x.LookupCategoryId).HasColumnName(@"LookupCategoryId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPLookupCategory>().Property<string>(x => x.LookupCategorySId).HasColumnName(@"LookupCategorySId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPLookupCategory>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPLookupCategory>().HasKey(@"LookupCategoryId");
        }

        partial void CustomizeCPLookupCategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPLookup Mapping

        private void CPLookupMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPLookup>().ToTable(@"Lookups", @"Core");
            modelBuilder.Entity<CPLookup>().Property<long>(x => x.LookupId).HasColumnName(@"LookupId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPLookup>().Property<long>(x => x.LookupCategoyId).HasColumnName(@"LookupCategoyId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPLookup>().Property<string>(x => x.LookupSId).HasColumnName(@"LookupSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPLookup>().Property<string>(x => x.EnglishName).HasColumnName(@"EnglishName").HasColumnType(@"nvarchar(400)").IsRequired().ValueGeneratedNever().HasMaxLength(400);
            modelBuilder.Entity<CPLookup>().Property<string>(x => x.ArabicName).HasColumnName(@"ArabicName").HasColumnType(@"nvarchar(400)").IsRequired().ValueGeneratedNever().HasMaxLength(400);
            modelBuilder.Entity<CPLookup>().Property<long>(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPLookup>().Property<System.Nullable<int>>(x => x.GroupBitWsie).HasColumnName(@"GroupBitWsie").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPLookup>().HasKey(@"LookupId", @"LookupCategoyId");
        }

        partial void CustomizeCPLookupMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPOnlineSession Mapping

        private void CPOnlineSessionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPOnlineSession>().ToTable(@"OnlineSessions", @"Core");
            modelBuilder.Entity<CPOnlineSession>().Property<long>(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPOnlineSession>().Property<string>(x => x.SessionSId).HasColumnName(@"SessionSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPOnlineSession>().Property<System.Nullable<long>>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPOnlineSession>().Property<bool>(x => x.IsArabic).HasColumnName(@"IsArabic").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<CPOnlineSession>().Property<System.DateTime>(x => x.LastActivityDateTime).HasColumnName(@"LastActivityDateTime").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPOnlineSession>().Property<System.DateTime>(x => x.CreationDateTime).HasColumnName(@"CreationDateTime").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPOnlineSession>().HasKey(@"SessionId");
        }

        partial void CustomizeCPOnlineSessionMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPOutEmail Mapping

        private void CPOutEmailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPOutEmail>().ToTable(@"OutEmails", @"Core");
            modelBuilder.Entity<CPOutEmail>().Property<long>(x => x.OutEmailId).HasColumnName(@"OutEmailId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPOutEmail>().Property<string>(x => x.To).HasColumnName(@"To").HasColumnType(@"nvarchar(256)").IsRequired().ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<CPOutEmail>().Property<string>(x => x.Subject).HasColumnName(@"Subject").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPOutEmail>().Property<string>(x => x.Body).HasColumnName(@"Body").HasColumnType(@"ntext").IsRequired().ValueGeneratedNever().HasMaxLength(1073741823);
            modelBuilder.Entity<CPOutEmail>().Property<bool>(x => x.IsHtml).HasColumnName(@"IsHtml").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPOutEmail>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPOutEmail>().Property<bool>(x => x.IsSent).HasColumnName(@"IsSent").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPOutEmail>().Property<System.Nullable<System.DateTime>>(x => x.SentDate).HasColumnName(@"SentDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPOutEmail>().HasKey(@"OutEmailId");
        }

        partial void CustomizeCPOutEmailMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPRole Mapping

        private void CPRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPRole>().ToTable(@"Roles", @"Core");
            modelBuilder.Entity<CPRole>().Property<long>(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPRole>().Property<System.Nullable<long>>(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPRole>().Property<string>(x => x.RoleSId).HasColumnName(@"RoleSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPRole>().Property<string>(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPRole>().Property<string>(x => x.RoleCode).HasColumnName(@"RoleCode").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPRole>().HasKey(@"RoleId");
        }

        partial void CustomizeCPRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTenantDomain Mapping

        private void CPTenantDomainMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTenantDomain>().ToTable(@"TenantDomains", @"Core");
            modelBuilder.Entity<CPTenantDomain>().Property<long>(x => x.TenantDomainId).HasColumnName(@"TenantDomainId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPTenantDomain>().Property<long>(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTenantDomain>().Property<string>(x => x.Host).HasColumnName(@"Host").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPTenantDomain>().HasKey(@"TenantDomainId");
        }

        partial void CustomizeCPTenantDomainMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTenant Mapping

        private void CPTenantMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTenant>().ToTable(@"Tenants", @"Core");
            modelBuilder.Entity<CPTenant>().Property<long>(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTenant>().Property<string>(x => x.TenantSId).HasColumnName(@"TenantSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPTenant>().Property<string>(x => x.Host).HasColumnName(@"Host").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPTenant>().Property<string>(x => x.LogoUri).HasColumnName(@"LogoUri").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPTenant>().Property<string>(x => x.FooterLogoUri).HasColumnName(@"FooterLogoUri").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPTenant>().Property<bool>(x => x.IsDomainAccessControl).HasColumnName(@"IsDomainAccessControl").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTenant>().Property<bool>(x => x.EnableAccountActivation).HasColumnName(@"EnableAccountActivation").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTenant>().Property<string>(x => x.SessionIdName).HasColumnName(@"SessionIdName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTenant>().Property<int>(x => x.SessionTimeout).HasColumnName(@"SessionTimeout").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTenant>().HasKey(@"TenantId");
        }

        partial void CustomizeCPTenantMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTmpAssignee Mapping

        private void CPTmpAssigneeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTmpAssignee>().ToTable(@"Tmp_Assignees", @"Core");
            modelBuilder.Entity<CPTmpAssignee>().Property<int>(x => x.AssigneeId).HasColumnName(@"AssigneeId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPTmpAssignee>().Property<int>(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().Property<string>(x => x.CycleId).HasColumnName(@"CycleId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPTmpAssignee>().Property<string>(x => x.StepId).HasColumnName(@"StepId").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPTmpAssignee>().Property<string>(x => x.StepNameCaption).HasColumnName(@"StepNameCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpAssignee>().Property<string>(x => x.StepCaption).HasColumnName(@"StepCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpAssignee>().Property<int>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().Property<bool>(x => x.IsProcessed).HasColumnName(@"IsProcessed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().Property<string>(x => x.Comments).HasColumnName(@"Comments").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPTmpAssignee>().Property<System.Nullable<System.DateTime>>(x => x.DueDate).HasColumnName(@"DueDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().Property<System.Nullable<System.DateTime>>(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().Property<bool>(x => x.IsSkipped).HasColumnName(@"IsSkipped").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpAssignee>().HasKey(@"AssigneeId");
        }

        partial void CustomizeCPTmpAssigneeMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTmpInstance Mapping

        private void CPTmpInstanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTmpInstance>().ToTable(@"Tmp_Instances", @"Core");
            modelBuilder.Entity<CPTmpInstance>().Property<int>(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.InstanceKeyId).HasColumnName(@"InstanceKeyId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPTmpInstance>().Property<int>(x => x.MetadataId).HasColumnName(@"MetadataId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.StepId).HasColumnName(@"StepId").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.StepNameCaption).HasColumnName(@"StepNameCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.StepCaption).HasColumnName(@"StepCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.CycleId).HasColumnName(@"CycleId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPTmpInstance>().Property<int>(x => x.RequesterId).HasColumnName(@"RequesterId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.BaseClass).HasColumnName(@"BaseClass").HasColumnType(@"nvarchar(2000)").IsRequired().ValueGeneratedNever().HasMaxLength(2000);
            modelBuilder.Entity<CPTmpInstance>().Property<string>(x => x.Data).HasColumnName(@"Data").HasColumnType(@"ntext").IsRequired().ValueGeneratedNever().HasMaxLength(1073741823);
            modelBuilder.Entity<CPTmpInstance>().Property<bool>(x => x.IsCompleted).HasColumnName(@"IsCompleted").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<CPTmpInstance>().Property<bool>(x => x.IsClosed).HasColumnName(@"IsClosed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<CPTmpInstance>().Property<System.Nullable<System.DateTime>>(x => x.SLATimer).HasColumnName(@"SLATimer").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstance>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstance>().HasKey(@"InstanceId");
        }

        partial void CustomizeCPTmpInstanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTmpInstanceStatu Mapping

        private void CPTmpInstanceStatuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTmpInstanceStatu>().ToTable(@"Tmp_InstanceStatus", @"Core");
            modelBuilder.Entity<CPTmpInstanceStatu>().Property<int>(x => x.InstanceStatusId).HasColumnName(@"InstanceStatusId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPTmpInstanceStatu>().Property<int>(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstanceStatu>().Property<bool>(x => x.IsProcessed).HasColumnName(@"IsProcessed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstanceStatu>().Property<System.DateTime>(x => x.PauseToDate).HasColumnName(@"PauseToDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstanceStatu>().Property<string>(x => x.StepId).HasColumnName(@"StepId").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpInstanceStatu>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpInstanceStatu>().HasKey(@"InstanceStatusId");
        }

        partial void CustomizeCPTmpInstanceStatuMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTmpMetadata Mapping

        private void CPTmpMetadataMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTmpMetadata>().ToTable(@"Tmp_Metadatas", @"Core");
            modelBuilder.Entity<CPTmpMetadata>().Property<int>(x => x.MetadataId).HasColumnName(@"MetadataId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPTmpMetadata>().Property<string>(x => x.MetadataKey).HasColumnName(@"MetadataKey").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpMetadata>().Property<System.Nullable<bool>>(x => x.IsListed).HasColumnName(@"IsListed").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPTmpMetadata>().Property<System.Nullable<int>>(x => x.WorkflowCategoryId).HasColumnName(@"WorkflowCategoryId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPTmpMetadata>().Property<string>(x => x.WorkflowName).HasColumnName(@"WorkflowName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPTmpMetadata>().Property<string>(x => x.BaseClass).HasColumnName(@"BaseClass").HasColumnType(@"nvarchar(1000)").IsRequired().ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<CPTmpMetadata>().HasKey(@"MetadataId");
        }

        partial void CustomizeCPTmpMetadataMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPTmpWorkflowcategory Mapping

        private void CPTmpWorkflowcategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPTmpWorkflowcategory>().ToTable(@"Tmp_WorkflowCategories", @"Core");
            modelBuilder.Entity<CPTmpWorkflowcategory>().Property<int>(x => x.WorkflowCategoryId).HasColumnName(@"WorkflowCategoryId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPTmpWorkflowcategory>().Property<string>(x => x.EnglishName).HasColumnName(@"EnglishName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpWorkflowcategory>().Property<string>(x => x.ArabicName).HasColumnName(@"ArabicName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPTmpWorkflowcategory>().Property<int>(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPTmpWorkflowcategory>().HasKey(@"WorkflowCategoryId");
        }

        partial void CustomizeCPTmpWorkflowcategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUnit Mapping

        private void CPUnitMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUnit>().ToTable(@"Units", @"Core");
            modelBuilder.Entity<CPUnit>().Property<long>(x => x.UnitId).HasColumnName(@"UnitId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().Property<System.Nullable<long>>(x => x.UnitParentId).HasColumnName(@"UnitParentId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().Property<long>(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().Property<string>(x => x.UnitNameEnglish).HasColumnName(@"UnitNameEnglish").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUnit>().Property<string>(x => x.UnitNameArabic).HasColumnName(@"UnitNameArabic").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUnit>().Property<string>(x => x.Abbr).HasColumnName(@"Abbr").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUnit>().Property<int>(x => x.UnitTypeId).HasColumnName(@"UnitTypeId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().Property<System.DateTime>(x => x.UnitStarted).HasColumnName(@"UnitStarted").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().Property<System.Nullable<System.DateTime>>(x => x.UnitEnded).HasColumnName(@"UnitEnded").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnit>().HasKey(@"UnitId");
        }

        partial void CustomizeCPUnitMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUnitsOld Mapping

        private void CPUnitsOldMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUnitsOld>().ToTable(@"Units_old", @"Core");
            modelBuilder.Entity<CPUnitsOld>().Property<long>(x => x.UnitId).HasColumnName(@"UnitId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().Property<System.Nullable<long>>(x => x.UnitParentId).HasColumnName(@"UnitParentId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().Property<long>(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().Property<string>(x => x.UnitNameEnglish).HasColumnName(@"UnitNameEnglish").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUnitsOld>().Property<string>(x => x.UnitNameArabic).HasColumnName(@"UnitNameArabic").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUnitsOld>().Property<string>(x => x.Abbr).HasColumnName(@"Abbr").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUnitsOld>().Property<int>(x => x.UnitTypeId).HasColumnName(@"UnitTypeId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().Property<System.DateTime>(x => x.UnitStarted).HasColumnName(@"UnitStarted").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().Property<System.Nullable<System.DateTime>>(x => x.UnitEnded).HasColumnName(@"UnitEnded").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitsOld>().HasKey(@"UnitId");
        }

        partial void CustomizeCPUnitsOldMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUnitType Mapping

        private void CPUnitTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUnitType>().ToTable(@"UnitTypes", @"Core");
            modelBuilder.Entity<CPUnitType>().Property<int>(x => x.UnitTypeId).HasColumnName(@"UnitTypeId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitType>().Property<int>(x => x.EntityMetadataId).HasColumnName(@"EntityMetadataId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUnitType>().Property<string>(x => x.UnitTypeNameEnglish).HasColumnName(@"UnitTypeNameEnglish").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUnitType>().Property<string>(x => x.UnitTypeNameArabic).HasColumnName(@"UnitTypeNameArabic").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUnitType>().HasKey(@"UnitTypeId");
        }

        partial void CustomizeCPUnitTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUserDelegation Mapping

        private void CPUserDelegationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUserDelegation>().ToTable(@"UserDelegation", @"Core");
            modelBuilder.Entity<CPUserDelegation>().Property<long>(x => x.DelegationId).HasColumnName(@"DelegationId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPUserDelegation>().Property<long>(x => x.FromUserId).HasColumnName(@"FromUserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUserDelegation>().Property<long>(x => x.ToUserId).HasColumnName(@"ToUserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUserDelegation>().Property<System.DateTime>(x => x.FromDate).HasColumnName(@"FromDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUserDelegation>().Property<System.Nullable<System.DateTime>>(x => x.ToDate).HasColumnName(@"ToDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPUserDelegation>().Property<string>(x => x.Comment).HasColumnName(@"Comment").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPUserDelegation>().Property<long>(x => x.DelegatedRoleId).HasColumnName(@"DelegatedRoleId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUserDelegation>().Property<string>(x => x.DelegationSId).HasColumnName(@"DelegationSId").HasColumnType(@"nvarchar(36)").ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPUserDelegation>().HasKey(@"DelegationId");
        }

        partial void CustomizeCPUserDelegationMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUser Mapping

        private void CPUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUser>().ToTable(@"Users", @"Core");
            modelBuilder.Entity<CPUser>().Property<long>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<string>(x => x.UserSId).HasColumnName(@"UserSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPUser>().Property<System.Nullable<long>>(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<string>(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.Password).HasColumnName(@"Password").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<string>(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.SecondName).HasColumnName(@"SecondName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.ThirdName).HasColumnName(@"ThirdName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.FullNameEn).HasColumnName(@"FullNameEn").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.FullNameAr).HasColumnName(@"FullNameAr").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUser>().Property<System.Nullable<bool>>(x => x.IsManager).HasColumnName(@"IsManager").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<long>>(x => x.ManagerId).HasColumnName(@"ManagerId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgUnitId).HasColumnName(@"OrgUnitId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv1Id).HasColumnName(@"OrgLv1Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv2Id).HasColumnName(@"OrgLv2Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv3Id).HasColumnName(@"OrgLv3Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv4Id).HasColumnName(@"OrgLv4Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv5Id).HasColumnName(@"OrgLv5Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv6Id).HasColumnName(@"OrgLv6Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.OrgLv7Id).HasColumnName(@"OrgLv7Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.DesignationId).HasColumnName(@"DesignationId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<string>(x => x.DesignationEn).HasColumnName(@"DesignationEn").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUser>().Property<string>(x => x.DesignationAr).HasColumnName(@"DesignationAr").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.Grade).HasColumnName(@"Grade").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<string>(x => x.Gender).HasColumnName(@"Gender").HasColumnType(@"char(1)").ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<CPUser>().Property<System.Nullable<System.DateTime>>(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.NationalityId).HasColumnName(@"NationalityId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<System.DateTime>>(x => x.JoinedDate).HasColumnName(@"JoinedDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<System.DateTime>>(x => x.TerminationDate).HasColumnName(@"TerminationDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<bool>>(x => x.IsContractor).HasColumnName(@"IsContractor").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<bool>>(x => x.IsArabic).HasColumnName(@"IsArabic").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<bool>>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<bool>>(x => x.IsLocked).HasColumnName(@"IsLocked").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<int>>(x => x.AccountType).HasColumnName(@"AccountType").HasColumnType(@"int").ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<CPUser>().Property<System.Nullable<System.DateTime>>(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().Property<System.Nullable<System.DateTime>>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPUser>().HasKey(@"UserId");
        }

        partial void CustomizeCPUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUsersBeforeSync Mapping

        private void CPUsersBeforeSyncMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUsersBeforeSync>().ToTable(@"UsersBeforeSync", @"Core");
            modelBuilder.Entity<CPUsersBeforeSync>().Property<long>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.UserSId).HasColumnName(@"UserSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<long>(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.Password).HasColumnName(@"Password").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.Title).HasColumnName(@"Title").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.SecondName).HasColumnName(@"SecondName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.ThirdName).HasColumnName(@"ThirdName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.FullNameEn).HasColumnName(@"FullNameEn").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.FullNameAr).HasColumnName(@"FullNameAr").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<bool>(x => x.IsManager).HasColumnName(@"IsManager").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<long>(x => x.ManagerId).HasColumnName(@"ManagerId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgUnitId).HasColumnName(@"OrgUnitId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv1Id).HasColumnName(@"OrgLv1Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv2Id).HasColumnName(@"OrgLv2Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv3Id).HasColumnName(@"OrgLv3Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv4Id).HasColumnName(@"OrgLv4Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv5Id).HasColumnName(@"OrgLv5Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv6Id).HasColumnName(@"OrgLv6Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.OrgLv7Id).HasColumnName(@"OrgLv7Id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<int>>(x => x.DesignationId).HasColumnName(@"DesignationId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.DesignationEn).HasColumnName(@"DesignationEn").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.DesignationAr).HasColumnName(@"DesignationAr").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<int>(x => x.Grade).HasColumnName(@"Grade").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<string>(x => x.Gender).HasColumnName(@"Gender").HasColumnType(@"char(1)").IsRequired().ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.DateTime>(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<int>(x => x.NationalityId).HasColumnName(@"NationalityId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.DateTime>(x => x.JoinedDate).HasColumnName(@"JoinedDate").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.Nullable<System.DateTime>>(x => x.TerminationDate).HasColumnName(@"TerminationDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<bool>(x => x.IsContractor).HasColumnName(@"IsContractor").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<bool>(x => x.IsArabic).HasColumnName(@"IsArabic").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<bool>(x => x.IsLocked).HasColumnName(@"IsLocked").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<int>(x => x.AccountType).HasColumnName(@"AccountType").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.DateTime>(x => x.LastLoginDate).HasColumnName(@"LastLoginDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUsersBeforeSync>().HasKey(@"UserId");
        }

        partial void CustomizeCPUsersBeforeSyncMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPUserTempAssignment Mapping

        private void CPUserTempAssignmentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPUserTempAssignment>().ToTable(@"UserTempAssignment", @"Core");
            modelBuilder.Entity<CPUserTempAssignment>().Property<long>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUserTempAssignment>().Property<long>(x => x.UnitId).HasColumnName(@"UnitId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPUserTempAssignment>().Property<System.Nullable<bool>>(x => x.IsManager).HasColumnName(@"IsManager").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<CPUserTempAssignment>().Property<System.Nullable<System.DateTime>>(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPUserTempAssignment>().Property<System.Nullable<System.DateTime>>(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPUserTempAssignment>().HasKey(@"UserId", @"UnitId");
        }

        partial void CustomizeCPUserTempAssignmentMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPVendor Mapping

        private void CPVendorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPVendor>().ToTable(@"Vendor", @"Core");
            modelBuilder.Entity<CPVendor>().Property<long>(x => x.VendorId).HasColumnName(@"VendorId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPVendor>().Property<string>(x => x.VendorSid).HasColumnName(@"VendorSid").HasColumnType(@"nchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36).HasDefaultValueSql(@"CONVERT([nvarchar](36),newid())");
            modelBuilder.Entity<CPVendor>().Property<string>(x => x.VendorNameEn).HasColumnName(@"VendorNameEn").HasColumnType(@"nvarchar(500)").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPVendor>().Property<string>(x => x.VendorNameAr).HasColumnName(@"VendorNameAr").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPVendor>().Property<string>(x => x.VendorEmail).HasColumnName(@"VendorEmail").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<CPVendor>().HasKey(@"VendorId");
        }

        partial void CustomizeCPVendorMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPWFInstancesFollowup Mapping

        private void CPWFInstancesFollowupMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPWFInstancesFollowup>().ToTable(@"WFInstancesFollowup", @"Core");
            modelBuilder.Entity<CPWFInstancesFollowup>().Property<long>(x => x.WfInstanceViewId).HasColumnName(@"WfInstanceViewId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPWFInstancesFollowup>().Property<long>(x => x.WFinstanceId).HasColumnName(@"WFinstanceId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWFInstancesFollowup>().Property<long>(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWFInstancesFollowup>().HasKey(@"WfInstanceViewId");
        }

        partial void CustomizeCPWFInstancesFollowupMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPWorkflowAssignee Mapping

        private void CPWorkflowAssigneeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPWorkflowAssignee>().ToTable(@"WorkflowAssignees", @"Core");
            modelBuilder.Entity<CPWorkflowAssignee>().Property<long>(x => x.AssigneeId).HasColumnName(@"AssigneeId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<long>(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<long>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<string>(x => x.CycleId).HasColumnName(@"CycleId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPWorkflowAssignee>().Property<int>(x => x.AssigneeStatus).HasColumnName(@"AssigneeStatus").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<string>(x => x.StepId).HasColumnName(@"StepId").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<CPWorkflowAssignee>().Property<string>(x => x.StepNameCaption).HasColumnName(@"StepNameCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowAssignee>().Property<string>(x => x.StepCaption).HasColumnName(@"StepCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowAssignee>().Property<string>(x => x.Comments).HasColumnName(@"Comments").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<System.Nullable<System.DateTime>>(x => x.DueDate).HasColumnName(@"DueDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<System.Nullable<System.DateTime>>(x => x.ProcessedDate).HasColumnName(@"ProcessedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowAssignee>().HasKey(@"AssigneeId");
        }

        partial void CustomizeCPWorkflowAssigneeMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPWorkflowCategory Mapping

        private void CPWorkflowCategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPWorkflowCategory>().ToTable(@"WorkflowCategories", @"Core");
            modelBuilder.Entity<CPWorkflowCategory>().Property<long>(x => x.WorkflowCategoryId).HasColumnName(@"WorkflowCategoryId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPWorkflowCategory>().Property<string>(x => x.WorkflowCategorySId).HasColumnName(@"WorkflowCategorySId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPWorkflowCategory>().Property<string>(x => x.EnglishName).HasColumnName(@"EnglishName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowCategory>().Property<string>(x => x.ArabicName).HasColumnName(@"ArabicName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowCategory>().Property<int>(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowCategory>().HasKey(@"WorkflowCategoryId");
        }

        partial void CustomizeCPWorkflowCategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPWorkflowInstance Mapping

        private void CPWorkflowInstanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPWorkflowInstance>().ToTable(@"WorkflowInstances", @"Core");
            modelBuilder.Entity<CPWorkflowInstance>().Property<long>(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.InstanceSId).HasColumnName(@"InstanceSId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPWorkflowInstance>().Property<long>(x => x.MetadataId).HasColumnName(@"MetadataId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().Property<int>(x => x.InstanceStatus).HasColumnName(@"InstanceStatus").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.CycleId).HasColumnName(@"CycleId").HasColumnType(@"nvarchar(36)").IsRequired().ValueGeneratedNever().HasMaxLength(36);
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.StepId).HasColumnName(@"StepId").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.StepNameCaption).HasColumnName(@"StepNameCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.StepCaption).HasColumnName(@"StepCaption").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowInstance>().Property<long>(x => x.RequesterId).HasColumnName(@"RequesterId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.BaseClass).HasColumnName(@"BaseClass").HasColumnType(@"nvarchar(2000)").IsRequired().ValueGeneratedNever().HasMaxLength(2000);
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.Data).HasColumnName(@"Data").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().Property<System.Nullable<System.DateTime>>(x => x.SLATimer).HasColumnName(@"SLATimer").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().Property<string>(x => x.InstanceBrief).HasColumnName(@"InstanceBrief").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstance>().HasKey(@"InstanceId");
        }

        partial void CustomizeCPWorkflowInstanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region CPWorkflowInstanceStatus Mapping

        private void CPWorkflowInstanceStatusMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CPWorkflowInstanceStatus>().ToTable(@"WorkflowInstanceStatus", @"Core");
            modelBuilder.Entity<CPWorkflowInstanceStatus>().Property<long>(x => x.InstanceStatusId).HasColumnName(@"InstanceStatusId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<CPWorkflowInstanceStatus>().Property<long>(x => x.InstanceId).HasColumnName(@"InstanceId").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstanceStatus>().Property<bool>(x => x.IsProcessed).HasColumnName(@"IsProcessed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstanceStatus>().Property<System.DateTime>(x => x.PauseToDate).HasColumnName(@"PauseToDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstanceStatus>().Property<string>(x => x.StepId).HasColumnName(@"StepId").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<CPWorkflowInstanceStatus>().Property<System.DateTime>(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<CPWorkflowInstanceStatus>().HasKey(@"InstanceStatusId");
        }

        partial void CustomizeCPWorkflowInstanceStatusMapping(ModelBuilder modelBuilder);

        #endregion

        #region dbCoreWorkflowMetadata Mapping

        private void dbCoreWorkflowMetadataMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<dbCoreWorkflowMetadata>().ToTable(@"WorkflowMetadatas", @"Core");
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<long>(x => x.MetadataId).HasColumnName(@"MetadataId").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<string>(x => x.MetadataSId).HasColumnName(@"MetadataSId").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<System.Nullable<bool>>(x => x.IsListed).HasColumnName(@"IsListed").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<System.Nullable<long>>(x => x.WorkflowCategoryId).HasColumnName(@"WorkflowCategoryId").HasColumnType(@"bigint").ValueGeneratedNever();
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<string>(x => x.BaseClass).HasColumnName(@"BaseClass").HasColumnType(@"nvarchar(1000)").IsRequired().ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<string>(x => x.FileLocation).HasColumnName(@"FileLocation").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<dbCoreWorkflowMetadata>().Property<string>(x => x.BaseProjectName).HasColumnName(@"BaseProjectName").HasColumnType(@"nvarchar(400)").ValueGeneratedNever().HasMaxLength(400);
            modelBuilder.Entity<dbCoreWorkflowMetadata>().HasKey(@"MetadataId");
        }

        partial void CustomizedbCoreWorkflowMetadataMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

            #region CPGroupRole Navigation properties

            modelBuilder.Entity<CPGroupRole>().HasOne(x => x.CPGroup).WithMany(op => op.CPGroupRoles).IsRequired(true).HasForeignKey(@"GroupId");
            modelBuilder.Entity<CPGroupRole>().HasOne(x => x.CPRole).WithMany(op => op.CPGroupRoles).IsRequired(true).HasForeignKey(@"RoleId");

            #endregion

            #region CPGroup Navigation properties

            modelBuilder.Entity<CPGroup>().HasMany(x => x.CPGroupRoles).WithOne(op => op.CPGroup).IsRequired(true).HasForeignKey(@"GroupId");
            modelBuilder.Entity<CPGroup>().HasMany(x => x.CPGroups_ParentId).WithOne(op => op.CPGroup_ParentId).IsRequired(false).HasForeignKey(@"ParentId");
            modelBuilder.Entity<CPGroup>().HasOne(x => x.CPGroup_ParentId).WithMany(op => op.CPGroups_ParentId).IsRequired(false).HasForeignKey(@"ParentId");
            modelBuilder.Entity<CPGroup>().HasMany(x => x.CPGroupUsers).WithOne(op => op.CPGroup).IsRequired(true).HasForeignKey(@"GroupId");

            #endregion

            #region CPGroupUser Navigation properties

            modelBuilder.Entity<CPGroupUser>().HasOne(x => x.CPUser).WithMany(op => op.CPGroupUsers).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<CPGroupUser>().HasOne(x => x.CPGroup).WithMany(op => op.CPGroupUsers).IsRequired(true).HasForeignKey(@"GroupId");

            #endregion

            #region CPLookupCategory Navigation properties

            modelBuilder.Entity<CPLookupCategory>().HasMany(x => x.CPLookups).WithOne(op => op.CPLookupCategory).IsRequired(true).HasForeignKey(@"LookupCategoyId");

            #endregion

            #region CPLookup Navigation properties

            modelBuilder.Entity<CPLookup>().HasOne(x => x.CPLookupCategory).WithMany(op => op.CPLookups).IsRequired(true).HasForeignKey(@"LookupCategoyId");

            #endregion

            #region CPRole Navigation properties

            modelBuilder.Entity<CPRole>().HasMany(x => x.CPGroupRoles).WithOne(op => op.CPRole).IsRequired(true).HasForeignKey(@"RoleId");
            modelBuilder.Entity<CPRole>().HasMany(x => x.CPRoles_ParentId).WithOne(op => op.CPRole_ParentId).IsRequired(false).HasForeignKey(@"ParentId");
            modelBuilder.Entity<CPRole>().HasOne(x => x.CPRole_ParentId).WithMany(op => op.CPRoles_ParentId).IsRequired(false).HasForeignKey(@"ParentId");

            #endregion

            #region CPTenantDomain Navigation properties

            modelBuilder.Entity<CPTenantDomain>().HasOne(x => x.CPTenant).WithMany(op => op.CPTenantDomains).IsRequired(true).HasForeignKey(@"TenantId");

            #endregion

            #region CPTenant Navigation properties

            modelBuilder.Entity<CPTenant>().HasMany(x => x.CPTenantDomains).WithOne(op => op.CPTenant).IsRequired(true).HasForeignKey(@"TenantId");
            modelBuilder.Entity<CPTenant>().HasMany(x => x.CPUsers).WithOne(op => op.CPTenant).IsRequired(false).HasForeignKey(@"TenantId");

            #endregion

            #region CPTmpAssignee Navigation properties

            modelBuilder.Entity<CPTmpAssignee>().HasOne(x => x.CPTmpInstance).WithMany(op => op.CPTmpAssignees).IsRequired(true).HasForeignKey(@"InstanceId");

            #endregion

            #region CPTmpInstance Navigation properties

            modelBuilder.Entity<CPTmpInstance>().HasMany(x => x.CPTmpAssignees).WithOne(op => op.CPTmpInstance).IsRequired(true).HasForeignKey(@"InstanceId");
            modelBuilder.Entity<CPTmpInstance>().HasOne(x => x.CPTmpMetadata).WithMany(op => op.CPTmpInstances).IsRequired(true).HasForeignKey(@"MetadataId");
            modelBuilder.Entity<CPTmpInstance>().HasMany(x => x.CPTmpInstanceStatus).WithOne(op => op.CPTmpInstance).IsRequired(true).HasForeignKey(@"InstanceId");

            #endregion

            #region CPTmpInstanceStatu Navigation properties

            modelBuilder.Entity<CPTmpInstanceStatu>().HasOne(x => x.CPTmpInstance).WithMany(op => op.CPTmpInstanceStatus).IsRequired(true).HasForeignKey(@"InstanceId");

            #endregion

            #region CPTmpMetadata Navigation properties

            modelBuilder.Entity<CPTmpMetadata>().HasMany(x => x.CPTmpInstances).WithOne(op => op.CPTmpMetadata).IsRequired(true).HasForeignKey(@"MetadataId");

            #endregion

            #region CPUser Navigation properties

            modelBuilder.Entity<CPUser>().HasMany(x => x.CPGroupUsers).WithOne(op => op.CPUser).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<CPUser>().HasOne(x => x.CPTenant).WithMany(op => op.CPUsers).IsRequired(false).HasForeignKey(@"TenantId");
            modelBuilder.Entity<CPUser>().HasMany(x => x.CPWorkflowAssignees).WithOne(op => op.CPUser).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<CPUser>().HasMany(x => x.CPWorkflowInstances).WithOne(op => op.CPUser).IsRequired(true).HasForeignKey(@"RequesterId");

            #endregion

            #region CPWorkflowAssignee Navigation properties

            modelBuilder.Entity<CPWorkflowAssignee>().HasOne(x => x.CPUser).WithMany(op => op.CPWorkflowAssignees).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<CPWorkflowAssignee>().HasOne(x => x.CPWorkflowInstance).WithMany(op => op.CPWorkflowAssignees).IsRequired(true).HasForeignKey(@"InstanceId");

            #endregion

            #region CPWorkflowCategory Navigation properties

            modelBuilder.Entity<CPWorkflowCategory>().HasMany(x => x.dbCoreWorkflowMetadatas).WithOne(op => op.CPWorkflowCategory).IsRequired(false).HasForeignKey(@"WorkflowCategoryId");

            #endregion

            #region CPWorkflowInstance Navigation properties

            modelBuilder.Entity<CPWorkflowInstance>().HasMany(x => x.CPWorkflowAssignees).WithOne(op => op.CPWorkflowInstance).IsRequired(true).HasForeignKey(@"InstanceId");
            modelBuilder.Entity<CPWorkflowInstance>().HasOne(x => x.CPUser).WithMany(op => op.CPWorkflowInstances).IsRequired(true).HasForeignKey(@"RequesterId");
            modelBuilder.Entity<CPWorkflowInstance>().HasMany(x => x.CPWorkflowInstanceStatus).WithOne(op => op.CPWorkflowInstance).IsRequired(true).HasForeignKey(@"InstanceId");

            #endregion

            #region CPWorkflowInstanceStatus Navigation properties

            modelBuilder.Entity<CPWorkflowInstanceStatus>().HasOne(x => x.CPWorkflowInstance).WithMany(op => op.CPWorkflowInstanceStatus).IsRequired(true).HasForeignKey(@"InstanceId");

            #endregion

            #region dbCoreWorkflowMetadata Navigation properties

            modelBuilder.Entity<dbCoreWorkflowMetadata>().HasOne(x => x.CPWorkflowCategory).WithMany(op => op.dbCoreWorkflowMetadatas).IsRequired(false).HasForeignKey(@"WorkflowCategoryId");

            #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
