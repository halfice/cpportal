@using CitizenPortal.Models



<style>
    .headindingcss {
        color: #a04c4c;
        text-shadow: 1px 1px 10px white;
        font-size: 33px;
        font-weight: bold;
        font-variant-caps: all-small-caps;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <div class="headindingcss">
                profilegridkey
            </div>
        </div>
    </div>

    <div>
        <div class="form-group">
            <div>searchtitlekey</div>
            <input type="text" name="txtTitle" class="form-control">
        </div>
        <button type="button" onclick="CallSubmit()" class="btn btn-primary">Submit</button>
    </div>
    <hr />
    <div class="headindingcss">
        profilegridkey
    </div>
    <div>
        @(Html.Kendo().Grid
                       <ProfilesGridResult>
                       ()
                       .Name("grdProcRequestList")
                       .HtmlAttributes(new { style = "width:100%;" })
                       .Columns(columns =>
                       {

                           columns.Bound(p => p.UserId).Title("${{ProcReqTitle}}")
                           .HeaderHtmlAttributes(new { style = "white-space: normal" })
                           .ClientTemplate("<a title='#: UserId #' href='" + Url.Action("Profile", "Home", new { id = "#: UserId #" }) + "'>#: UserId #</a>")
                           .Width("15%");


                           columns.Bound(p => p.OrgLv1Id).Title("${{Sector}}")
                            .ClientFooterTemplate("Total Count: #=count#");



                           columns.Bound(p => p.OrgLv2Id).Title("${{Department}}")
                           .ClientFooterTemplate("Total Count: #=count#");


                           columns.Bound(p => p.EmailAddress).Title("UserName")
               .HeaderHtmlAttributes(new { style = "white-space: normal" });
                           columns.Bound(p => p.EmailAddress).Title("Email")
               .HeaderHtmlAttributes(new { style = "white-space: normal" });
                       })
                       .DataSource(dataSource => dataSource
                       .Ajax()
                       .ServerOperation(false)
                         .Group(g => g.Add(gg => gg.OrgLv1Id))
                           .Group(g => g.Add(gg => gg.OrgLv2Id))
                       .Aggregates(aggregates =>
                       {
                           aggregates.Add(p => p.OrgLv1Id).Count();
                           aggregates.Add(p => p.OrgLv2Id).Count();
                       })
                       .Model(m =>
                       {
                           m.Id(p => p.UserId);
                           m.Field(p => p.UserId).Editable(false);
                       })
                       .Read(read => read.Action("GetProfiles", "Home"))
                       ))
    </div>

</div>


<script type="text/javascript">
   


    function groupBy(array, f) {
        var groups = {};
        //console.log(array);

        array.forEach(function (o) {
            var group = JSON.stringify(f(o));
            groups[group] = groups[group] || [];
            groups[group].push(o);
        });

        return Object.keys(groups).map(function (group) {
            return groups[group];
        });
    }

    function AddSectorRow(OrgLv1Id, propertyVal, propertyCount, tblName) {
        var tBody = $("#" + tblName + " > TBODY")[0];
        if (tBody != null && tBody != "" && tBody != undefined) {
            var row = tBody.insertRow();
            var cell = $(row.insertCell(-1));
            cell.html(OrgLv1Id);
            cell = $(row.insertCell(-1));
            cell.html(propertyVal);
            cell = $(row.insertCell(-1));
            cell.html(propertyCount);
        }
    }

    function compareSectors(a, b) {
        return a.OrgLv1Id.localeCompare(b.OrgLv1Id);
    }

    var exportFlag = false;

    function IncludeGroups(e) {
        if (!exportFlag) {
            e.sender.showColumn(0);
            e.sender.showColumn(1);
            e.sender.showColumn(2);
            e.sender.showColumn(3);
            e.preventDefault();
            exportFlag = true;
            setTimeout(function () {
                e.sender.saveAsExcel();
            });
        } else {
            e.sender.hideColumn(0);
            e.sender.hideColumn(1);
            e.sender.hideColumn(2);
            e.sender.hideColumn(3);
            exportFlag = false;
        }
    }





     function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }






    function CallSubmict() {
        kendo.ui.progress($("#grdProcRequestList"), true);
        var title = $('#txtTitle').val();
        $.ajax({
            url: '@Url.Action("SearchProfiles", "Home")',
            data: { id: title },
            success: function (data) {
                kendo.ui.progress($("#grdProcRequestList"), false);
                $("#grdProcRequestList").data("kendoGrid").dataSource.data(result.Data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(xhr.responseText);
            }
        });

    }

    function clearcontrol() {
        kendo.ui.progress($("#grdProcRequestList"), true);
        var dropdownlist = $("#TypeofRequestSearch").data("kendoDropDownList");
      //  $('#IsProjectRelatedSearch').val("");
        kendo.ui.progress($("#grdProcRequestList"), false);

    }





</script>
